stack_type:
    #Used to forcefully change the setting of certain machines or generators and the power consumption.
  LOGITECH_LOGIC_REACTOR:
    #type supports "none","machine","generator"
    #Change the setting to none removes the machine from both stacks
    type: "none"
    #Set power consumption/t multiply by number of machines
    #Setting it to -1 does not change the power that is automatically obtained.
    energy: -1
  SILVER:
    #type supports "none","machine","generator"
    #Change the setting to none removes the machine from both stacks
    type: "generator"
    #Set power consumption/t multiply by number of machines
    #Setting it to -1 does not change the power that is automatically obtained.
    energy: 200

recipe_modify:
  #Reminder: This feature does not guarantee that there will be no problems when modifying special machines.ï¼Œ
  #Some machines attached to this book cannot be modified, but most of them can be.
  #Users take their own risks!
  #*************************************************
  #Type the id of the slimefun item you want to change here.

  CARBON_PRESS:
    #Mode is the mode of operation allow a+, a, w+, w
    #a for add, w for overwrite, + for whether to try to modify the original machine recipe If no + is added then only the stacked machine recipe will be modified
    #Warning: "+" is used with caution and may cause unpredictable errors!
    #Note that when you wish to add a generator recipe to a non-generator, please use "w" or you may not be able to load a stacked generator.
    mode: "a+"
    #Machine types support machine and generator (material generator)
    #Will be added to the stacked machine and the stacked generator, respectively
    #If it is a generator it will not attempt to modify the original machine recipe!
    type: "machine"
    #You can leave this out when you don't want to modify the machine or when you want to delete the original recipe.
    recipe:
      #Names are random. Read them in order.
      example_recipe:
        input:
          #Each item needs a different name because the list doesn't support some of the settings
          #Write quantity + id here to parse it as an item.
          #Copper ingots will be resolved into copper slime ingots.
          #I don't think anyone uses crap like vanilla copper.
          1: "3BEDROCK"
        output:
          1:
            #See the note below for a description of abstract item groups
            type: "ra"
            item:
              1: "DIAMOND"
              2: "DIAMOND_ORE"
            weight:
              1: 3
              2: 1
        #Time Consumption Slimefun Scale Units
        tick: 5

  #This is an abstract example, actually the copper powder can't produce anything but we can configure it to produce in a stacked machine
  COPPER_DUST:
    mode: "w"
    type: "machine"
    recipe:
      example_abstract_recipe:
        input:
          1:
            #*************************************************************************
            #Recipe lists support the use of abstract item groups, but do not guarantee that modifications to the original machine recipe will work.
            #After testing, this attachment and the original AContainer support modifying abstract item groups, and both can be used.
            #The types are
            #ra (one out of an amount of items by weight)
            #rc (random amount of items)
            #eq (equal input, meaning any of the inputs will match)
            #rp (certain probability of current item certain probability of empty)
            #(Not enabled) dp (display item that will be automatically discarded when the recipe is integrated)
            type: "eq"
            item:
              #It doesn't matter how many items are in it, as long as it's a positive number.
              1: "BEDROCK"
              2: "COMMAND_BLOCK"
            #To standardize the format, type weight
            weight:
              #Requires that amount must be written to represent the number of items that should be matched for this item group.
              amount: 1
            #This lump can be thought of as an item which is an abstract group of items of type eq.
            #*************************************************************************
        output:
          1:
            #This is the first item set output, and it's an abstract item set of type ra.
            #*********************************************************************************************
            type: "ra"
            item:
              1: #Abstract item groups support nesting, (although some of the nesting may not be as intended).
                #******************************************
                type: "rp"
                item:
                  1:
                    #*********************
                    type: "rc"
                    item:
                      1: "DIRT"
                    weight:
                      #The weight here refers to a random number from 3-23.
                      #We ask the user to write min and max in "rc" and only in "rc" mode.
                      min: 1
                      max: 4

                    #*********************
                #The flag of each item should correspond to the weight or it will fail to load, ex: 1 :item corresponds to 1:weight.
                weight:
                  #The weight here refers to the percentage probability
                  #We ask the user to write the percentage probability in "rp" and only in "rp" mode.
                  1: 66
                #******************************************
              2: "DIAMOND"
            weight:
              #The weight here refers to the weight of the corresponding item group
              #We ask the user to write the weights of the components in "ra" and only in "ra" mode.
              #Here 1 4 means that the first item in the item has 1/(1+4)=20% probability of output. The second item has 4/(1+4)=80% probability of output
              1: 1
              2: 2
            #With the configuration above, we should be able to get a random set of items 80% of which will produce a diamond, 20%*66% of which will produce-
            #a random amount of dirt, from 3-23 and the rest of which will produce nothing, as the first output of the machine.
            #*********************************************************************************************
            #This is the second item group of the output, and it's a normal item.
          2: "LOGITECH_NOLOGIC"
        #Time Consumption Slimefun Scale Units
        tick: 114514
  #This is an abstract example, actually the copper powder can't produce anything but we can configure it to produce in a stacked machine
  SILVER_DUST:
    mode: "w"
    type: "generator"
    recipe:
      example_abstract_recipe:
        output:
          1:
            #This is the first item set output, and it's an abstract item set of type ra.
            #*********************************************************************************************
            type: "ra"
            item:
              1: #Abstract item groups support nesting, (although some of the nesting may not be as intended).
                #******************************************
                type: "rp"
                item:
                  1:
                    #*********************
                    type: "rc"
                    item:
                      1: "DIRT"
                    weight:
                      #The weight here refers to a random number from 3-23.
                      #We ask the user to write min and max in "rc" and only in "rc" mode.
                      min: 3
                      max: 23

                    #*********************
                #The flag of each item should correspond to the weight or it will fail to load, ex: 1 :item corresponds to 1:weight.
                weight:
                  #The weight here refers to the percentage probability
                  #We ask the user to write the percentage probability in "rp" and only in "rp" mode.
                  1: 66
                #******************************************
              2: "DIAMOND"
            weight:
              #The weight here refers to the weight of the corresponding item group
              #We ask the user to write the weights of the components in "ra" and only in "ra" mode.
              #Here 1 4 means that the first item in the item has 1/(1+4)=20% probability of output. The second item has 4/(1+4)=80% probability of output
              1: 1
              2: 4
            #With the configuration above, we should be able to get a random set of items 80% of which will produce a diamond, 20%*66% of which will produce-
            #a random amount of dirt, from 3-23 and the rest of which will produce nothing, as the first output of the machine.
            #*********************************************************************************************
            #This is the second item group of the output, and it's a normal item.
          2: "2LOGITECH_NOLOGIC"
        #Time Consumption Slimefun Scale Units
        tick: 1919810